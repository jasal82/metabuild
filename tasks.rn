use arch::*;
use metabuild::TaskRunner;

mod python;
mod core;

use python::Venv;

fn filesystem_examples() {
    // Create a temporary directory (will be deleted when the object is dropped)
    println!("{}", str::paint("Creating temporary directory").blue().bold());
    let t = fs::TempDir::new()?;
    println!("Temp dir {}", t.path());
    
    // Find all .rn files in the current directory and subdirectories and return
    // a list of relative paths to them
    println!("{}", str::paint("Finding .rn files in current dir and subdirs").blue().bold());
    let files = fs::glob("**/*.rn");
    for file in files {
        println!("File {}", file);
    }

    // Copy all .rn files in the current directory and subdirectories to a
    // temporary directory and test that the files are there
    println!("{}", str::paint("Copying .rn files to temp dir").blue().bold());
    fs::copy_glob("**/*.rn", t.path());
    if fs::is_file(t.path() + "/.mb/modules/core/mod.rn") {
        println!("File exists");
    }

    // Create a temporary file (will be deleted when the object is dropped)
    println!("{}", str::paint("Creating temporary file").blue().bold());
    let f = fs::File::temp()?;

    // Write some data to it
    println!("{}", str::paint("Writing to temporary file").blue().bold());
    f.write("Hello world!");

    // Rewind the file and read the data
    println!("{}", str::paint("Reading from temporary file").blue().bold());
    f.rewind();
    let s = f.read()?;

    // Print the data and some file information
    println(s);
    println!("File length {}", f.len());
    println!("File path {}", f.path());
}

fn python_examples() {
    // Create a temporary directory (will be deleted when the object is dropped)
    let t = fs::TempDir::new()?;
    
    // Write a requirements file into the temporary directory
    let reqfile = fs::File::create(t.path() + "/requirements.txt")?;
    reqfile.write("scipy==1.10.1\n");
    reqfile.sync();

    // Create a virtual environment in the temporary directory
    if let Ok(venv) = Venv::new(t.path() + "/.venv") {
        if !venv.exists() {
            venv.init();
        }

        // Install the requirements into the virtual environment; suppress the
        // output of pip
        venv.quiet(true);
        venv.install_requirements(t.path() + "/requirements.txt");

        // Run the python interpreter in the venv; make sure that quiet is
        // disabled so that we can see potential output
        venv.quiet(false);
        let exitcode = venv.run(["python", "-c", "import scipy"]);
        if exitcode == 0 {
            println!("Scipy installed");
        }
    }
}

pub fn main(tasks) {
    filesystem_examples();
    python_examples();
    
    println!("{} ist ein {}", str::paint("das").red().underline(), str::paint("test").blue().bold());
    let runner = TaskRunner::new();
    runner.register("build", build);
    runner.run(tasks);
    println!("Tasks {}", core::string::join(tasks, "; "));
    println!("CLI args {}", core::string::join(sys::args(), ","));
}

fn build() {
    println!("-- build");
}