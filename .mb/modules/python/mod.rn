use cmd::Command;
use crate::core;

pub struct Venv {
    path,
    interpreter,
    quiet,
}

pub fn find_interpreter() {
    // Unfortunately there's no or_else() implementation in Rune at the moment
    if let Ok(p) = fs::which("python3") {
        Ok(p)
    } else if let Ok(p) = fs::which("python") {
        Ok(p)
    } else {
        Err("No Python interpreter found in PATH")
    }
}

impl Venv {
    pub fn new(path) {
        Ok(Self {
            path: path,
            interpreter: find_interpreter()?,
            quiet: false,
        })
    }

    pub fn get_interpreter(self) {
        self.interpreter
    }

    pub fn quiet(self, value) {
        self.quiet = value;
    }

    pub fn exists(self) {
        // Is this enough?
        fs::is_dir(self.path)
    }

    pub fn init(self) {
        core::run(self.interpreter, ["-m", "venv", self.path]);
    }

    pub fn install_requirements(self, file) {
        self.run([self.interpreter, "-m", "pip", "install", "-r", file]);
    }

    // This is executed in a shell by default. If you need to capture the
    // exit code of a process run inside the shell make sure to propagate
    // it to the parent process.
    pub fn python(self, command) {
        self.run([self.interpreter, "-c", command]);
    }

    pub fn pip(self, command) {
        self.run([self.interpreter, "-m", "pip", command]);
    }

    // This is executed in a shell by default. If you need to capture the
    // exit code of a process run inside the shell make sure to propagate
    // it to the parent process.
    pub fn run(self, command) {
        let c = Command::new(command[0])
            //.shell()
            .args(command.iter().skip(1).collect::<Vec>())
            //.args(command[1..]); // needs https://github.com/rune-rs/rune/issues/460
            .env_remove("PYTHONHOME");
        let entry_separator = ":";
        let bin_dir = "bin";
        if sys::is_windows() {
            entry_separator = ";";
            bin_dir = "Scripts";
        }
        c = c.env(
            core::path_variable(),
            core::path::join(fs::absolute(self.path)?, bin_dir) +
                entry_separator +
                sys::env()[core::path_variable()]
        );
        if self.quiet {
            c = c.stdout(cmd::Routing::Null());
            c = c.stderr(cmd::Routing::Null());
        }
        c.execute()
    }
}
