use cmd::Command;
use regex::Regex;

pub mod path {

    pub fn join(p1, p2) {
        let sep = super::path_separator();
        if p1.ends_with(sep) {
            return p1 + p2;
        } else {
            return p1 + sep + p2;
        }
    }

}

pub mod string {

    pub fn join(vec, sep) {
        if vec.len() > 0 {
            let s = vec[0];
            for i in vec.iter().skip(1).collect::<Vec>() {
                s += sep + i;
            }
            s
        } else {
            ""
        }
    }

}

pub fn run(command, args) {
    let command = Command::new(command).args(args);
    command.execute()
}

pub fn shell(command) {
    let args = command.split(" ").collect::<Vec>();
    let command = Command::new(args[0])
        .args(args.iter().skip(1).collect::<Vec>())
        .shell();
    command.execute()
}

pub fn path_separator() {
    if sys::is_windows() {
        "\\"
    } else {
        "/"
    }
}

pub fn path_variable() {
    if sys::env().contains_key("PATH") {
        "PATH"
    } else {
        "Path"
    }
}

pub fn path_variable_separator() {
    if sys::is_windows() {
        ";"
    } else {
        ":"
    }
}