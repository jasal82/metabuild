pub struct Client {
    url,
    token,
}

impl Client {
    pub fn new(url, token) {
        Client {
            url,
            token,
        }
    }

    fn get(self, url) {
        let req = http::Agent::new().get(url).set("X-JFrog-Art-Api", self.token);
        let res = req.call()?;
        json::from_string(res?.into_string()?)?
    }

   fn put(self, url, data) {
        let req = http::Agent::new().put(url).set("X-JFrog-Art-Api", self.token);
        let res = match data {
            Some(data) => req.send_string(data),
            None => req.call(),
        };
        json::from_string(res?.into_string()?)?
    }

    fn post(self, url, data) {
        let req = http::Agent::new().post(url).set("X-JFrog-Art-Api", self.token);
        let res = match data {
            Some(data) => req.send_string(data),
            None => req.call(),
        };
        json::from_string(res?.into_string()?)?
    }

    fn delete(self, url) {
        http::Agent::new().delete(url).set("X-JFrog-Art-Api", self.token).call()?;
    }

    pub fn item_info(self, repo_key, item_path) {
        self.get(format!("{}/api/storage/{}/{}", self.url, repo_key, item_path))
    }

    pub fn file_statistics(self, repo_key, item_path) {
        self.get(format!("{}/api/storage/{}/{}?stats", self.url, repo_key, item_path))
    }

    pub fn item_properties(self, repo_key, item_path) {
        self.get(format!("{}/api/storage/{}/{}?properties", self.url, repo_key, item_path))
    }

    pub fn create_directory(self, repo_key, item_path) {
        self.put(format!("{}/api/storage/{}/{}", self.url, repo_key, item_path), None)
    }

    pub fn delete_item(self, repo_key, item_path) {
        self.delete(format!("{}/{}/{}", self.url, repo_key, item_path));
    }

    pub fn copy_item(self, src_repo_key, src_item_path, dst_repo_key, dst_item_path) {
        self.post(format!("{}/api/copy/{}/{}?to=/{}/{}", self.url, src_repo_key, src_item_path, dst_repo_key, dst_item_path), None)
    }

    pub fn move_item(self, src_repo_key, src_item_path, dst_repo_key, dst_item_path) {
        self.post(format!("{}/api/move/{}/{}?to=/{}/{}", self.url, src_repo_key, src_item_path, dst_repo_key, dst_item_path), None)
    }
}