tests_utils = 
    @test paint: ||
        t = utils.paint("Hello world!").yellow().underline()
        assert_eq(t.to_string().bytes().to_tuple(), (27, 91, 52, 59, 51, 51, 109, 72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33, 27, 91, 48, 109))
    
    @test template: ||
        m = { test: "hello", name: "Homer" }
        t = utils.template("I said {{ test }} to {{ name }}", m)
        assert_eq(t, "I said hello to Homer")
    
    @test template_file: ||
        tf = io_ext.temp_file()
        tf.write("I said {{ test }} to {{ name }}")
        tf.flush()
        m = { test: "hello", name: "Homer" }
        t = utils.template_file(tf.path(), m)
        assert_eq(t, "I said hello to Homer")

    @test encode_base64: ||
        t = "Hello world!"
        b = utils.encode_base64(t)
        assert_eq(b, "SGVsbG8gd29ybGQh")
    
    @test decode_base64: ||
        b = "SGVsbG8gd29ybGQh"
        t = string.from_bytes(utils.decode_base64(b))
        assert_eq(t, "Hello world!")

tests_io_ext =
    @test is_file: ||
        tf = io_ext.temp_file()
        assert_eq(io_ext.is_file(tf.path()), true)
    
    @test is_dir: ||
        td = io_ext.temp_dir()
        assert_eq(io_ext.is_dir(td.path()), true)

    @test glob: ||
        td = io_ext.temp_dir()
        f1 = io.create(io.extend_path(td.path(), "f1.rs"))
        f2 = io.create(io.extend_path(td.path(), "f2.rs"))
        l = io_ext.glob(io.extend_path(td.path(), "*.rs"))
        assert_eq(l.size(), 2)
        assert_eq(l[0], io.extend_path(td.path(), "f1.rs"))
        assert_eq(l[1], io.extend_path(td.path(), "f2.rs"))
    
    @test absolute: ||
        a = io_ext.absolute("bla")
        assert_eq(a, io.extend_path(io.current_dir(), "bla"))
    
    @test which: ||
        if os.name() == "windows"
            assert_eq(io_ext.which("cmd"), "C:\\Windows\\system32\\cmd.exe")
        if os.name() == "linux"
            assert_eq(io_ext.which("ls"), "/usr/bin/ls")

tests_git =
    @test branches: ||
        git = git.open(".")
        b = git.branches()
        assert(b.contains("main"))
    
    @test tags: ||
        git = git.open(".")
        t = git.tags()
        assert(t.contains("v0.1.0"))

tests_core =
    @test join: ||
        l = ["a", "b", "c"]
        assert_eq(core.join(l, ","), "a,b,c")

tests_regex =
    @test find_all: ||
        r = re.regex("[0-9]+")
        t = "7.5.1-beta"
        ms = r.find_all(t)
        assert_eq(ms.each(|m| m.text()).to_list(), ["7", "5", "1"])
    
    @test find: ||
        r = re.regex("[0-9]+\\.[0-9]+\\.[0-9]+")
        t = "7.5.1-beta"
        m = r.find(t)
        assert_eq(m.text(), "7.5.1")
    
    @test captures: ||
        r = re.regex("([0-9]+)\\.([0-9]+)\\.([0-9]+)-(?<suffix>[a-z]+)")
        t = "8.3.2-alpha"
        c = r.captures(t)
        assert_ne(null, c) # assert_ne with `null` on the RHS does not work currently, see https://github.com/koto-lang/koto/issues/268
        assert_eq(c.get(1).text(), "8")
        assert_eq(c.get(2).text(), "3")
        assert_eq(c[3].text(), "2")
        assert_eq(c.get(4).text(), "alpha")
        assert_eq(c.get("suffix").text(), "alpha")
        assert_eq(c["suffix"].text(), "alpha")
    
    @test replace_all: ||
        r = re.regex("(?<y>\\d{4})-(?<m>\\d{2})-(?<d>\\d{2})")
        before = "1973-01-05, 1975-08-25 and 1980-10-18"
        after = r.replace_all(before, "\$m/\$d/\$y")
        assert_eq(after, "01/05/1973, 08/25/1975 and 10/18/1980")

tests_cmd =
    @test split: ||
        l = cmd.split("a \"b c\" d")
        assert_eq(l, ("a", "b c", "d"))
    
    @test join: ||
        l = ("a", "b c", "d")
        assert_eq(cmd.join(l), "a 'b c' d")
    
    @test execute: ||
        if os.name() == "windows"
            c = cmd.new("dir")
            o = c.arg("C:\\Windows").shell().execute()
            assert_eq(o.status, 0)
            assert(o.stdout.size() > 0)
        else if os.name() == "linux"
            c = cmd.new("ls")
            o = c.arg("/usr").shell().execute()
            assert_eq(o.status, 0)
            assert(o.stdout.size() > 0)

try
  test.run_tests tests_utils
  test.run_tests tests_io_ext
  test.run_tests tests_git
  test.run_tests tests_core
  test.run_tests tests_regex
  test.run_tests tests_cmd
catch e
  print "Test failed: $e"

step = |msg|
    print(utils.paint(msg + "...").blue().bold())

paint_examples = ||
    print(utils.paint("Hello world!").yellow().underline())
    print(utils.paint("Hello world!").green().bold())
    print(utils.paint("Hello world!").red().italic())
    print("{} {}!".format(utils.paint("Hello").green(), utils.paint("world").red()))
    print(utils.paint("Hello").yellow().bold().on_blue())

f = io.open("conanbuildinfo.json")
contents = f.read_to_string()
build_info = json.from_string(contents)

if build_info.contains_key("user_info_build")
    print(build_info.user_info_build.doc_tool.doc_tool_jar)
else
    print("No user_info_build in conanbuildinfo.json")

print("{} {}!".format utils.paint("Hello").red().underline(), utils.paint("world").green().bold())
for t in "bla/blubb/eins/zwei".split("/")
    print t

step("Run arch examples")
tar = arch.targz("test.tar.gz")
tar.append_file("test.koto", "test.koto")
tar.finish()

zip = arch.zip("test.zip")
zip.append_file("test.koto", "test.koto")
zip.finish()

arch.extract("test.zip", "testzip")
arch.extract("test.tar.gz", "testtargz")

step("Run paint examples")
paint_examples()

step("Run net examples")
client = net.client()
#client.download_file("https://github.com/jasal82/metabuild/releases/download/v0.3.6/mb-v0.3.6-x86_64-unknown-linux-musl", "mb.test")

step("Run http examples")
client = http.client()
r = client.get("http://www.google.de").call()
print(r.status())

step("Run regex examples")
r = re.regex("[0-9]+")
t = "7.5.1-beta"
ms = r.find_all(t)
for m in ms
    print(m.text())

r = re.regex("([0-9]+)\\.([0-9]+)\\.([0-9]+)")
m = r.find(t)
if m
    print(m.text())

r = re.regex("([0-9]+)\\.([0-9]+)\\.([0-9]+)-(?<suffix>[a-z]+)")
t = "8.3.2-alpha"
c = r.captures(t)
print(c.get(1).text())
if c
    print(c.get(1).text())
    print(c.get(2).text())
    print(c[3].text())
    print(c.get(4).text())
    print(c.get("suffix").text())
    print(c["suffix"].text())

r = re.regex("(?<y>\\d{4})-(?<m>\\d{2})-(?<d>\\d{2})")
before = "1973-01-05, 1975-08-25 and 1980-10-18"
after = r.replace_all(before, "\$m/\$d/\$y")
print(after)

r = re.regex("Homer (?<middle>.)\\. Simpson")
t = "Homer J. Simpson"
m = r.captures(t)
if m
    print(m.get("middle").text())

step("Run io_ext examples")
l = io_ext.glob("**/*.rs")
print(l)

#io_ext.copy_glob("**/*.rn", "rn_inventory")

tf = io_ext.temp_file()
print(tf.path())

td = io_ext.temp_dir()
io_ext.copy("tasks.rn", io.extend_path(td.path(), "tasks.rn"))
io_ext.copy_dir("tests", io.extend_path(td.path(), "tests"))
g = io_ext.glob(io.extend_path(td.path(), "*"))

step("Run template examples")
m = { test: 42, name: "Homer" }

t = utils.template("I say {{ test }} to {{ name }}", m)
print(t)

step("Run base64 examples")
t = "Hello world!"
b = utils.encode_base64(t)
print(b)
d = utils.decode_base64(b)
print(d)
s = string.from_bytes(d)
print(s)